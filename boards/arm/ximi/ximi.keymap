/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/*
 * SPDX-License-Identifier: MIT
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/rgb.h>
 #include <dt-bindings/zmk/outputs.h>
 #include <dt-bindings/zmk/mouse.h>
 #include <behaviors/mouse_keys.dtsi>
 
 #define DEFAULT 0
 #define NAV     1
 #define SYM     2
 #define FUNC    3
 #define MEDIA   4
 #define WINNAV  5
 
 &caps_word {
     continue-list = <UNDERSCORE MINUS>;
 };
 
 / {
    combos {
        compatible = "zmk,combos";
        combo_undo {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LC(Z)>;
        };
    };
};
 
 / {
     sensors {
         compatible = "zmk,keymap-sensors";
         sensors = <&encoder_1 &encoder_2>;
         triggers-per-rotation = <20>;
     };
 };
 
 / {
     macros {
         u_kvm_switch: u_kvm_switch {
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&macro_press &kp TAB>
                 , <&macro_wait_time 200>
                 , <&macro_tap &kp RIGHT>
                 , <&macro_wait_time 200>
                 , <&macro_release &kp TAB>
                 ;
         };
     };
 };
 
 / {
     behaviors {
         hm: homerow_mods {
             compatible = "zmk,behavior-hold-tap";
             #binding-cells = <2>;
             tapping-term-ms = <200>;
             flavor = "tap-preferred";
             bindings = <&kp>, <&kp>;
         };
         hs: homerow_shift {
             compatible = "zmk,behavior-hold-tap";
             #binding-cells = <2>;
             tapping-term-ms = <175>;
             flavor = "balanced";
             bindings = <&kp>, <&kp>;
         };
     };
 
     keymap {
         compatible = "zmk,keymap";
 
         default_layer {
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
 
             bindings = <
     &mkp MCLK  &kp Q       &kp W       &kp F       &kp P         &kp B                                           &kp J          &kp L         &lt WINNAV U  &kp Y       &kp SEMI    &kp BSLH
     &mkp LCLK  &hm LCTL A  &hm LGUI R  &hm LALT S  &hs LSHIFT T  &kp G                                           &kp M          &hs RSHIFT N  &hm RALT E    &hm RGUI I  &hm RCTL O  &kp SQT
     &mkp RCLK  &kp Z       &kp X       &kp C       &kp D         &kp V                                           &kp K          &kp H         &kp COMMA     &kp DOT     &kp FSLH    &kp RET
                &kp C_MUTE                          &kp DEL       &lt NAV RET  &lt FUNC TAB       &lt MEDIA BSPC  &lt SYM SPACE  &kp SQT
                                                    &kp C_VOL_DN  &kp C_MUTE   &kp C_VOL_UP       &kp C_VOL_DN    &kp C_MUTE     &kp C_VOL_UP
             >;
         };
 
         nav_layer {
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
 
             bindings = <
     &mkp MCLK  &kp ESC      &kp PG_UP    &kp UP      &kp PG_DN     &trans                                  &kp ASTRK     &kp N7       &kp N8        &kp N9      &kp MINUS   &trans
     &mkp LCLK  &kp HOME     &kp LEFT     &kp DOWN    &kp RIGHT     &kp END                                 &kp FSLH      &kp N4       &kp N5        &kp N6      &kp PLUS    &trans
     &mkp RCLK  &trans       &trans       &trans      &trans        &trans                                  &kp EQUAL     &kp N1       &kp N2        &kp N3      &kp N0      &trans
                &kp C_MUTE                            &trans        &trans      &kp TAB          &kp BSPC   &kp SPACE     &kp DOT                                &kp C_MUTE
                                                      &trans        &trans      &trans           &trans     &trans        &trans
             >;
         };
 
         sym_layer {
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
 
             bindings = <
     &trans     &kp EXCL     &kp AT       &kp HASH        &kp DLLR         &kp PRCNT                                    &kp CARET     &kp AMPS          &kp ASTRK     &kp UNDER   &kp EQUAL   &trans
     &trans     &kp MINUS    &kp LBKT     &kp LBRC        &kp LPAR         &kp LT                                       &kp GT        &kp RPAR          &kp RBRC      &kp RBKT    &kp PLUS    &trans
     &trans     &kp CAPS     &kp GRAVE    &kp LC(LS(TAB)) &kp LC(LG(LEFT)) &caps_word                                   &trans        &kp LC(LG(RIGHT)) &kp LC(TAB)   &trans      &kp BSLH    &trans
                &kp C_MUTE                                &trans           &kp RET       &kp DEL         &kp BSPC       &trans        &trans                                      &kp C_MUTE
                                                          &trans           &trans        &trans          &trans         &trans        &trans
             >;
         };
 
         func_layer {
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
 
             bindings = <
     &trans     &bootloader  &kp LS(PG_UP) &kp LS(UP)   &kp LS(PG_DN) &trans                                   &kp C_PLAY_PAUSE &kp F7       &kp F8        &kp F9      &kp F10     &trans
     &trans     &kp LS(HOME) &kp LS(LEFT)  &kp LS(DOWN) &kp LS(RIGHT) &kp LS(END)                              &kp K_VOL_UP     &kp F4       &kp F5        &kp F6      &kp F11     &trans
     &trans     &trans       &trans        &trans       &trans        &u_kvm_switch                            &kp K_VOL_DN     &kp F1       &kp F2        &kp F3      &kp F12     &trans
                &kp C_MUTE                              &trans        &trans        &trans          &trans     &trans           &kp SPACE                              &kp C_MUTE
                                                        &trans        &trans        &trans          &trans     &trans           &trans
             >;
         };
 
         media_layer {
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
 
             bindings = <
     &trans     &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF &trans            &trans                                       &trans     &trans     &trans     &trans     &trans      &trans
     &trans     &trans           &rgb_ug RGB_HUI  &rgb_ug RGB_SAI &rgb_ug RGB_BRI   &rgb_ug RGB_SPI                              &trans     &trans     &trans     &trans     &trans      &trans
     &trans     &trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD &rgb_ug RGB_BRD   &rgb_ug RGB_SPD                              &trans     &trans     &trans     &trans     &trans      &trans
                &kp C_MUTE                                        &trans            &trans             &trans         &trans     &trans     &trans                           &kp C_MUTE
                                                                  &trans            &trans             &trans         &trans     &trans     &trans
             >;
         };
 
         winnav_layer {
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
 
             bindings = <
     &trans     &trans       &trans       &kp LG(UP)   &trans        &trans                                   &trans      &trans      &trans      &trans      &trans      &trans
     &trans     &trans       &kp LG(LEFT) &kp LG(DOWN) &kp LG(RIGHT) &trans                                   &trans      &trans      &trans      &trans      &trans      &trans
     &trans     &trans       &trans       &trans       &trans        &trans                                   &trans      &trans      &trans      &trans      &trans      &trans
                &kp C_MUTE                             &trans        &trans        &trans          &trans     &trans      &trans                              &kp C_MUTE
                                                       &trans        &trans        &trans          &trans     &trans      &trans
             >;
         };
     };
 };
 