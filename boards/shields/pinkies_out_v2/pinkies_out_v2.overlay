/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/input_transform.h>
#include <dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
        // for logging, remove later
        // zephyr,console = &cdc_acm_uart;
    };

    kscan0: kscan_0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;

        col-gpios
            = <&shift_reg 0 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 7 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 2 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 6 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 3 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 4 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 5 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 1 (GPIO_ACTIVE_HIGH)>
            ;

        row-gpios
            = <&pro_micro 4  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 0
            , <&pro_micro 5  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 1
            , <&pro_micro 6  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 2
            , <&pro_micro 7  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 3
            , <&pro_micro 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 4
            , <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 5
            , <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 6
            , <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 7
            , <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // row 8
            ;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <8>;
        rows = <9>;

        map = <
            RC(5,0) RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(6,2)                        RC(6,5) RC(0,5) RC(0,6) RC(0,7) RC(8,0) RC(5,3) RC(8,6)
            RC(6,0) RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(7,2)                        RC(7,5) RC(1,5) RC(1,6) RC(1,7) RC(8,1) RC(5,5) RC(8,7)
            RC(7,0) RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(6,3)                        RC(6,6) RC(2,5) RC(2,6) RC(2,7) RC(8,2) RC(5,6) RC(6,7)
            RC(7,1) RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(5,1)                        RC(5,2) RC(3,5) RC(3,6) RC(3,7) RC(8,3) RC(5,7) RC(7,7)
                            RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4)   RC(7,3)   RC(7,6)    RC(4,5) RC(4,6) RC(4,7) RC(8,4) RC(8,5)
        >;
    };
};

&spi1 {
    status = "okay";
    cs-gpios = <&pro_micro 10 GPIO_ACTIVE_LOW>;

    shift_reg: 595@0 {
        compatible = "zmk,gpio-595";
        status = "okay";
        gpio-controller;
        spi-max-frequency = <200000>;
        reg = <0>;
        #gpio-cells = <2>;
        ngpios = <8>;
    };
};

&pro_micro_i2c {
    // note that you need to hand wire the LED pin, which is P0.06
    status = "okay";
    
    glidepoint: glidepoint@2a {
        compatible = "cirque,pinnacle";
        reg = <0x2a>;
        status = "okay";
        // The aforementioned LED data pin that we're not using, hand wired to cirque DR
        dr-gpios = <&pro_micro 1 (GPIO_ACTIVE_HIGH)>;

        sensitivity = "4x";
        sleep;
        no-taps;
    };
};

/ {
    glidepoint_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint>;
        input-processors = <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>;
    };
};